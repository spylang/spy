from mlir import MLIR_Type, MLIR_op

## func.func @add_tensors(%A: tensor<2x2xf32>, %B: tensor<2x2xf32>) -> tensor<2x2xf32> {
##   %C = arith.addf %A, %B : tensor<2x2xf32>
##   return %C : tensor<2x2xf32>

@blue.generic
def Tensor(w, h, dtype):
    name = 'tensor<' + str(w) + 'x' + str(h) + 'x' + str(dtype) + '>'
    return MLIR_Type(name)


T = Tensor[2, 2, f64]
arith_addf = MLIR_op('arith.addf', T, (T, T))




def add(a: T, b: T) -> T:
    return arith_addf(a, b)


## def main() -> None:
##     print(Tensor)
##     print(arith_addf)
